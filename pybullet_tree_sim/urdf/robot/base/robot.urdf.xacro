<?xml version ="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro">
    <!-- robot name parameter -->
    <xacro:arg name="name" default="robot_pybullet_tree_sim"/>
    <xacro:property name="arm_base_parent" value="world" />
    <xacro:property name="end_effector_parent" value="" />

    
    <!-- create link fixed to the "world" -->
    <link name="world" />
    
    
    <!-- Base attachment -->
    <xacro:arg name="base_attachment_type" default="" />

    <xacro:if value="${ '$(arg base_attachment_type)' == 'linear_slider' }" >
        <!-- linear slider -->
        <xacro:include filename="$(find linear_slider_description)/urdf/macro/linear_slider_base.urdf.xacro" />
    
        <xacro:arg name="linear_slider_parent" default="world"/>
        <xacro:arg name="linear_slider_robot_ip" default="169.254.57.177"/> <!-- TODO: add this into the macro, but instead get from yaml file-->
        <xacro:arg name="prefix" default="''" />
        <xacro:arg name="use_mock_hardware" default="false" />
        <xacro:arg name="mock_sensor_commands" default="false" />
        <xacro:arg name="sim_gazebo" default="false" />
        <xacro:arg name="sim_gazebo_classic" default="false"/>
        
        <!-- Set slider moving base as arm parent joint -->
        <xacro:property name="arm_base_parent" value="$(arg prefix)tool0" />
            
        <xacro:linear_slider
            parent="$(arg linear_slider_parent)"
            prefix="$(arg prefix)"
            sim_gazebo="$(arg sim_gazebo)"
            sim_gazebo_classic="$(arg sim_gazebo_classic)"
            use_mock_hardware="$(arg use_mock_hardware)"
            mock_sensor_commands="$(arg mock_sensor_commands)"
        />
    </xacro:if>
    <xacro:if value="${ '$(arg base_attachment_type)' == 'farm-ng' }" >
        <!-- <xacro:include filename="$(find farm-ng)/urdf" /> -->
    </xacro:if>

    <!-- Robot arm type. Current types are UR and Franka Emika -->
    <xacro:arg name="robot_type" default="robot_type" />
    <xacro:if value="${ '$(arg robot_type)' == 'ur5' }">
        <xacro:include filename="$(find ur_description)/urdf/ur_macro.xacro"/>
        <!-- UR -->
        <!-- possible 'ur_type' values: ur3, ur3e, ur5, ur5e, ur10, ur10e, ur16e, ur20, ur30 -->
        <!-- the default value should raise an error in case this was called without defining the type -->
        <xacro:arg name="ur_type" default="ur5x"/>
        
        <!-- parameters -->
        <xacro:arg name="tf_prefix" default="" />
        <xacro:arg name="joint_limit_params" default="$(find ur_description)/config/$(arg ur_type)/joint_limits.yaml"/>
        <xacro:arg name="kinematics_params" default="$(find ur_description)/config/$(arg ur_type)/default_kinematics.yaml"/>
        <xacro:arg name="physical_params" default="$(find ur_description)/config/$(arg ur_type)/physical_parameters.yaml"/>
        <xacro:arg name="visual_params" default="$(find ur_description)/config/$(arg ur_type)/visual_parameters.yaml"/>
        <xacro:arg name="transmission_hw_interface" default=""/>
        <xacro:arg name="safety_limits" default="false"/>
        <xacro:arg name="safety_pos_margin" default="0.15"/>
        <xacro:arg name="safety_k_position" default="20"/>
        <!-- ros2_control related parameters -->
        <xacro:arg name="headless_mode" default="false" />
        <xacro:arg name="robot_ip" default="0.0.0.0" />
        <xacro:arg name="script_filename" default=""/>
        <xacro:arg name="output_recipe_filename" default=""/>
        <xacro:arg name="input_recipe_filename" default=""/>
        <xacro:arg name="reverse_ip" default="0.0.0.0"/>
        <xacro:arg name="script_command_port" default="50004"/>
        <xacro:arg name="reverse_port" default="50001"/>
        <xacro:arg name="script_sender_port" default="50002"/>
        <xacro:arg name="trajectory_port" default="50003"/>
        <!--   tool communication related parameters-->
        <xacro:arg name="use_tool_communication" default="false" />
        <xacro:arg name="tool_voltage" default="0" />
        <xacro:arg name="tool_parity" default="0" />
        <xacro:arg name="tool_baud_rate" default="115200" />
        <xacro:arg name="tool_stop_bits" default="1" />
        <xacro:arg name="tool_rx_idle_chars" default="1.5" />
        <xacro:arg name="tool_tx_idle_chars" default="3.5" />
        <xacro:arg name="tool_device_name" default="/tmp/ttyUR" />
        <xacro:arg name="tool_tcp_port" default="54321" />
        
            <!-- Simulation parameters -->
        <xacro:arg name="use_fake_hardware" default="false" />
        <xacro:arg name="fake_sensor_commands" default="false" />
        <xacro:arg name="sim_gazebo" default="false" />
        <xacro:arg name="sim_ignition" default="false" />
        <xacro:arg name="simulation_controllers" default="" />
        
        <!-- initial position for simulations (Fake Hardware, Gazebo, Ignition) -->
        <xacro:arg name="initial_positions_file" default="$(find ur_description)/config/initial_positions.yaml"/>
        
        <!-- convert to property to use substitution in function -->
        <xacro:property name="initial_positions_file" default="$(arg initial_positions_file)"/>
        
        <!-- arm -->
        <xacro:ur_robot
            name="$(arg name)"
            tf_prefix="$(arg tf_prefix)"
            parent="world"
            joint_limits_parameters_file="$(arg joint_limit_params)"
            kinematics_parameters_file="$(arg kinematics_params)"
            physical_parameters_file="$(arg physical_params)"
            visual_parameters_file="$(arg visual_params)"
            transmission_hw_interface="$(arg transmission_hw_interface)"
            safety_limits="$(arg safety_limits)"
            safety_pos_margin="$(arg safety_pos_margin)"
            safety_k_position="$(arg safety_k_position)"
            use_fake_hardware="$(arg use_fake_hardware)"
            fake_sensor_commands="$(arg fake_sensor_commands)"
            sim_gazebo="$(arg sim_gazebo)"
            sim_ignition="$(arg sim_ignition)"
            headless_mode="$(arg headless_mode)"
            initial_positions="${xacro.load_yaml(initial_positions_file)}"
            use_tool_communication="$(arg use_tool_communication)"
            tool_voltage="$(arg tool_voltage)"
            tool_parity="$(arg tool_parity)"
            tool_baud_rate="$(arg tool_baud_rate)"
            tool_stop_bits="$(arg tool_stop_bits)"
            tool_rx_idle_chars="$(arg tool_rx_idle_chars)"
            tool_tx_idle_chars="$(arg tool_tx_idle_chars)"
            tool_device_name="$(arg tool_device_name)"
            tool_tcp_port="$(arg tool_tcp_port)"
            robot_ip="$(arg robot_ip)"
            script_filename="$(arg script_filename)"
            output_recipe_filename="$(arg output_recipe_filename)"
            input_recipe_filename="$(arg input_recipe_filename)"
            reverse_ip="$(arg reverse_ip)"
            script_command_port="$(arg script_command_port)"
            reverse_port="$(arg reverse_port)"
            script_sender_port="$(arg script_sender_port)"
            trajectory_port="$(arg trajectory_port)"
            >
            <origin xyz="0 0 0" rpy="0 0 0" />          <!-- position robot in the world -->
        </xacro:ur_robot>
    </xacro:if>
    <xacro:if value="${ '$(arg robot_type)' == 'fr3' }">
        <xacro:include filename="$(find franka_description)/robots/common/franka_robot.xacro"/>
        <!-- Name for this robot -->
        <xacro:arg name="arm_id" default="fr3" />
        <!-- Should an end-effector be mounted at the flange?" -->
        <xacro:arg name="hand" default="true" />
        <!-- Which end-effector would be mounted at the flange?" -->
        <xacro:arg name="ee_id" default="franka_hand" />
        <!-- Should self-collision be enabled? -->
        <xacro:arg name="with_sc" default="false" />
        <!-- Is the robot being controlled with ros2_control?" -->
        <xacro:arg name="ros2_control" default="false" />
        <!-- IP address or hostname of the robot" -->
        <xacro:arg name="robot_ip" default="" />
        <!-- Should a fake hardware be used? -->
        <xacro:arg name="use_fake_hardware" default="false" />
        <!-- Should fake sensors be used? -->
        <xacro:arg name="fake_sensor_commands" default="false" />
        <!-- Should the robot be spawned in Gazebo?" -->
        <xacro:arg name="gazebo" default="false" />
        <!-- Should the robot be spawned in Gazebo with effort interfaces?" -->
        <xacro:arg name="gazebo_effort" default="false" />
        <xacro:franka_robot arm_id="$(arg arm_id)"
                            joint_limits="${xacro.load_yaml('$(find franka_description)/robots/$(arg arm_id)/joint_limits.yaml')}"
                            inertials="${xacro.load_yaml('$(find franka_description)/robots/$(arg arm_id)/inertials.yaml')}"
                            kinematics="${xacro.load_yaml('$(find franka_description)/robots/$(arg arm_id)/kinematics.yaml')}"
                            dynamics="${xacro.load_yaml('$(find franka_description)/robots/$(arg arm_id)/dynamics.yaml')}"
                            gazebo="$(arg gazebo)"
                            hand="$(arg hand)"
                            ee_id="$(arg ee_id)"
                            with_sc="$(arg with_sc)"
                            ros2_control="$(arg ros2_control)"
                            robot_ip="$(arg robot_ip)"
                            use_fake_hardware="$(arg use_fake_hardware)"
                            fake_sensor_commands="$(arg fake_sensor_commands)"
                            gazebo_effort="$(arg gazebo_effort)">
        </xacro:franka_robot>
    </xacro:if>
    
    <!-- Robot arm base/eef attachments -->
    <xacro:arg name="end_effector_type" default=""/> -->
    <xacro:if value="${ '$(arg end_effector_type)' == 'apple_picker' }">
        
    </xacro:if>
    <xacro:if value="${ '$(arg end_effector_type)' == 'pruner' }" >
        
    </xacro:if>
    
</robot>